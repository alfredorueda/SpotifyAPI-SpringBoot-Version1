{
	"info": {
		"_postman_id": "track-api-collection",
		"name": "Track API - CRUD Operations",
		"description": "Complete collection to test all CRUD operations for the Track API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has track with ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    ",
							"    // Store the ID for other requests",
							"    pm.collectionVariables.set(\"track_id\", jsonData.id);",
							"});",
							"",
							"pm.test(\"Response has correct track data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(\"Bohemian Rhapsody\");",
							"    pm.expect(jsonData.artist).to.eql(\"Queen\");",
							"    pm.expect(jsonData.duration).to.eql(355);",
							"    pm.expect(jsonData).to.have.property('creationDate');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Bohemian Rhapsody\",\n    \"artist\": \"Queen\",\n    \"duration\": 355\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/tracks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Another Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has track with ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    ",
							"    // Store the second ID for testing",
							"    pm.collectionVariables.set(\"track_id_2\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Hotel California\",\n    \"artist\": \"Eagles\",\n    \"duration\": 391\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/tracks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Array contains tracks\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Track by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has correct track\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"track_id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks/{{track_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"{{track_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Track by Non-Existent ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks/non-existent-id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"non-existent-id"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Track was updated correctly\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(\"Bohemian Rhapsody (Remastered)\");",
							"    pm.expect(jsonData.artist).to.eql(\"Queen\");",
							"    pm.expect(jsonData.duration).to.eql(360);",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"track_id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Bohemian Rhapsody (Remastered)\",\n    \"artist\": \"Queen\",\n    \"duration\": 360\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/tracks/{{track_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"{{track_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Non-Existent Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Some Title\",\n    \"artist\": \"Some Artist\",\n    \"duration\": 200\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/tracks/non-existent-id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"non-existent-id"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Track for Deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has track with ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    ",
							"    // Store the ID for deletion test",
							"    pm.collectionVariables.set(\"track_to_delete\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Track to Delete\",\n    \"artist\": \"Test Artist\",\n    \"duration\": 180\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/tracks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks/{{track_to_delete}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"{{track_to_delete}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Track Deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks/{{track_to_delete}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"{{track_to_delete}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Non-Existent Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks/non-existent-id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks",
						"non-existent-id"
					]
				}
			},
			"response": []
		},
		{
			"name": "Final - Get All Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"console.log(\"Final tracks count:\", pm.response.json().length);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tracks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tracks"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "track_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "track_id_2",
			"value": "",
			"type": "string"
		},
		{
			"key": "track_to_delete",
			"value": "",
			"type": "string"
		}
	]
}